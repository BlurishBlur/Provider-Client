/* 
 * Provider server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Informations about a product
    /// </summary>
    [DataContract]
    public partial class Product :  IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="Producer">The producer of the product.</param>
        /// <param name="ProductName">The name of the product.</param>
        /// <param name="ChemicalName">The chemical name of the product.</param>
        /// <param name="MolWeight">The mol weight of the product.</param>
        /// <param name="Description">The description about the product.</param>
        /// <param name="Price">The price of the product.</param>
        /// <param name="Packaging">The packaging of the product.</param>
        /// <param name="DeliveryTime">The delivery time of the product.</param>
        public Product(string Producer = null, string ProductName = null, string ChemicalName = null, string MolWeight = null, string Description = null, string Price = null, string Packaging = null, string DeliveryTime = null)
        {
            this.Producer = Producer;
            this.ProductName = ProductName;
            this.ChemicalName = ChemicalName;
            this.MolWeight = MolWeight;
            this.Description = Description;
            this.Price = Price;
            this.Packaging = Packaging;
            this.DeliveryTime = DeliveryTime;
        }
        
        /// <summary>
        /// The producer of the product
        /// </summary>
        /// <value>The producer of the product</value>
        [DataMember(Name="producer", EmitDefaultValue=false)]
        public string Producer { get; set; }
        /// <summary>
        /// The name of the product
        /// </summary>
        /// <value>The name of the product</value>
        [DataMember(Name="productName", EmitDefaultValue=false)]
        public string ProductName { get; set; }
        /// <summary>
        /// The chemical name of the product
        /// </summary>
        /// <value>The chemical name of the product</value>
        [DataMember(Name="chemicalName", EmitDefaultValue=false)]
        public string ChemicalName { get; set; }
        /// <summary>
        /// The mol weight of the product
        /// </summary>
        /// <value>The mol weight of the product</value>
        [DataMember(Name="molWeight", EmitDefaultValue=false)]
        public string MolWeight { get; set; }
        /// <summary>
        /// The description about the product
        /// </summary>
        /// <value>The description about the product</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// The price of the product
        /// </summary>
        /// <value>The price of the product</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public string Price { get; set; }
        /// <summary>
        /// The packaging of the product
        /// </summary>
        /// <value>The packaging of the product</value>
        [DataMember(Name="packaging", EmitDefaultValue=false)]
        public string Packaging { get; set; }
        /// <summary>
        /// The delivery time of the product
        /// </summary>
        /// <value>The delivery time of the product</value>
        [DataMember(Name="deliveryTime", EmitDefaultValue=false)]
        public string DeliveryTime { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Producer: ").Append(Producer).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ChemicalName: ").Append(ChemicalName).Append("\n");
            sb.Append("  MolWeight: ").Append(MolWeight).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Packaging: ").Append(Packaging).Append("\n");
            sb.Append("  DeliveryTime: ").Append(DeliveryTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="other">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Producer == other.Producer ||
                    this.Producer != null &&
                    this.Producer.Equals(other.Producer)
                ) && 
                (
                    this.ProductName == other.ProductName ||
                    this.ProductName != null &&
                    this.ProductName.Equals(other.ProductName)
                ) && 
                (
                    this.ChemicalName == other.ChemicalName ||
                    this.ChemicalName != null &&
                    this.ChemicalName.Equals(other.ChemicalName)
                ) && 
                (
                    this.MolWeight == other.MolWeight ||
                    this.MolWeight != null &&
                    this.MolWeight.Equals(other.MolWeight)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.Packaging == other.Packaging ||
                    this.Packaging != null &&
                    this.Packaging.Equals(other.Packaging)
                ) && 
                (
                    this.DeliveryTime == other.DeliveryTime ||
                    this.DeliveryTime != null &&
                    this.DeliveryTime.Equals(other.DeliveryTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Producer != null)
                    hash = hash * 59 + this.Producer.GetHashCode();
                if (this.ProductName != null)
                    hash = hash * 59 + this.ProductName.GetHashCode();
                if (this.ChemicalName != null)
                    hash = hash * 59 + this.ChemicalName.GetHashCode();
                if (this.MolWeight != null)
                    hash = hash * 59 + this.MolWeight.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.Packaging != null)
                    hash = hash * 59 + this.Packaging.GetHashCode();
                if (this.DeliveryTime != null)
                    hash = hash * 59 + this.DeliveryTime.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
