/* 
 * Provider server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPageManagerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a note to a supplier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplierName"></param>
        /// <param name="editor"></param>
        /// <param name="text"></param>
        /// <returns></returns>
        void AddNoteToSupplier (string supplierName, string editor, string text);

        /// <summary>
        /// Adds a note to a supplier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplierName"></param>
        /// <param name="editor"></param>
        /// <param name="text"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddNoteToSupplierWithHttpInfo (string supplierName, string editor, string text);
        /// <summary>
        /// Creates a product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="chemicalName"></param>
        /// <param name="molWeight"></param>
        /// <param name="description"></param>
        /// <param name="price"></param>
        /// <param name="packaging"></param>
        /// <param name="deliveryTime"></param>
        /// <param name="producer"></param>
        /// <returns>Product</returns>
        Product CreateProduct (string productName, string chemicalName, double? molWeight, string description, double? price, string packaging, string deliveryTime, string producer);

        /// <summary>
        /// Creates a product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="chemicalName"></param>
        /// <param name="molWeight"></param>
        /// <param name="description"></param>
        /// <param name="price"></param>
        /// <param name="packaging"></param>
        /// <param name="deliveryTime"></param>
        /// <param name="producer"></param>
        /// <returns>ApiResponse of Product</returns>
        ApiResponse<Product> CreateProductWithHttpInfo (string productName, string chemicalName, double? molWeight, string description, double? price, string packaging, string deliveryTime, string producer);
        /// <summary>
        /// Deletes an existing product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns></returns>
        void DeleteProduct (Product product);

        /// <summary>
        /// Deletes an existing product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductWithHttpInfo (Product product);
        /// <summary>
        /// Edits an existing product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="newProductName"></param>
        /// <param name="newChemicalName"></param>
        /// <param name="newMolWeight"></param>
        /// <param name="newDescription"></param>
        /// <param name="newPrice"></param>
        /// <param name="newPackaging"></param>
        /// <param name="newDeliveryTime"></param>
        /// <returns></returns>
        void EditProduct (Product product, string newProductName, string newChemicalName, double? newMolWeight, string newDescription, double? newPrice, string newPackaging, string newDeliveryTime);

        /// <summary>
        /// Edits an existing product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="newProductName"></param>
        /// <param name="newChemicalName"></param>
        /// <param name="newMolWeight"></param>
        /// <param name="newDescription"></param>
        /// <param name="newPrice"></param>
        /// <param name="newPackaging"></param>
        /// <param name="newDeliveryTime"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditProductWithHttpInfo (Product product, string newProductName, string newChemicalName, double? newMolWeight, string newDescription, double? newPrice, string newPackaging, string newDeliveryTime);
        /// <summary>
        /// Gets all suppliers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Page&gt;</returns>
        List<Page> GetSuppliers ();

        /// <summary>
        /// Gets all suppliers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Page&gt;</returns>
        ApiResponse<List<Page>> GetSuppliersWithHttpInfo ();
        /// <summary>
        /// Update a supplier page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="description"></param>
        /// <param name="location"></param>
        /// <param name="contactInformation"></param>
        /// <returns></returns>
        void UpdatePage (string page, string description, string location, string contactInformation);

        /// <summary>
        /// Update a supplier page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="description"></param>
        /// <param name="location"></param>
        /// <param name="contactInformation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePageWithHttpInfo (string page, string description, string location, string contactInformation);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a note to a supplier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplierName"></param>
        /// <param name="editor"></param>
        /// <param name="text"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddNoteToSupplierAsync (string supplierName, string editor, string text);

        /// <summary>
        /// Adds a note to a supplier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplierName"></param>
        /// <param name="editor"></param>
        /// <param name="text"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddNoteToSupplierAsyncWithHttpInfo (string supplierName, string editor, string text);
        /// <summary>
        /// Creates a product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="chemicalName"></param>
        /// <param name="molWeight"></param>
        /// <param name="description"></param>
        /// <param name="price"></param>
        /// <param name="packaging"></param>
        /// <param name="deliveryTime"></param>
        /// <param name="producer"></param>
        /// <returns>Task of Product</returns>
        System.Threading.Tasks.Task<Product> CreateProductAsync (string productName, string chemicalName, double? molWeight, string description, double? price, string packaging, string deliveryTime, string producer);

        /// <summary>
        /// Creates a product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="chemicalName"></param>
        /// <param name="molWeight"></param>
        /// <param name="description"></param>
        /// <param name="price"></param>
        /// <param name="packaging"></param>
        /// <param name="deliveryTime"></param>
        /// <param name="producer"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<Product>> CreateProductAsyncWithHttpInfo (string productName, string chemicalName, double? molWeight, string description, double? price, string packaging, string deliveryTime, string producer);
        /// <summary>
        /// Deletes an existing product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductAsync (Product product);

        /// <summary>
        /// Deletes an existing product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductAsyncWithHttpInfo (Product product);
        /// <summary>
        /// Edits an existing product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="newProductName"></param>
        /// <param name="newChemicalName"></param>
        /// <param name="newMolWeight"></param>
        /// <param name="newDescription"></param>
        /// <param name="newPrice"></param>
        /// <param name="newPackaging"></param>
        /// <param name="newDeliveryTime"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditProductAsync (Product product, string newProductName, string newChemicalName, double? newMolWeight, string newDescription, double? newPrice, string newPackaging, string newDeliveryTime);

        /// <summary>
        /// Edits an existing product.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="newProductName"></param>
        /// <param name="newChemicalName"></param>
        /// <param name="newMolWeight"></param>
        /// <param name="newDescription"></param>
        /// <param name="newPrice"></param>
        /// <param name="newPackaging"></param>
        /// <param name="newDeliveryTime"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditProductAsyncWithHttpInfo (Product product, string newProductName, string newChemicalName, double? newMolWeight, string newDescription, double? newPrice, string newPackaging, string newDeliveryTime);
        /// <summary>
        /// Gets all suppliers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Page&gt;</returns>
        System.Threading.Tasks.Task<List<Page>> GetSuppliersAsync ();

        /// <summary>
        /// Gets all suppliers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Page&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Page>>> GetSuppliersAsyncWithHttpInfo ();
        /// <summary>
        /// Update a supplier page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="description"></param>
        /// <param name="location"></param>
        /// <param name="contactInformation"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePageAsync (string page, string description, string location, string contactInformation);

        /// <summary>
        /// Update a supplier page
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="description"></param>
        /// <param name="location"></param>
        /// <param name="contactInformation"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePageAsyncWithHttpInfo (string page, string description, string location, string contactInformation);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PageManagerApi : IPageManagerApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PageManagerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PageManagerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PageManagerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PageManagerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a note to a supplier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplierName"></param>
        /// <param name="editor"></param>
        /// <param name="text"></param>
        /// <returns></returns>
        public void AddNoteToSupplier (string supplierName, string editor, string text)
        {
             AddNoteToSupplierWithHttpInfo(supplierName, editor, text);
        }

        /// <summary>
        /// Adds a note to a supplier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplierName"></param>
        /// <param name="editor"></param>
        /// <param name="text"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddNoteToSupplierWithHttpInfo (string supplierName, string editor, string text)
        {
            // verify the required parameter 'supplierName' is set
            if (supplierName == null)
                throw new ApiException(400, "Missing required parameter 'supplierName' when calling PageManagerApi->AddNoteToSupplier");
            // verify the required parameter 'editor' is set
            if (editor == null)
                throw new ApiException(400, "Missing required parameter 'editor' when calling PageManagerApi->AddNoteToSupplier");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling PageManagerApi->AddNoteToSupplier");

            var localVarPath = "/PageManager/AddNoteToSupplier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (supplierName != null) localVarQueryParams.Add("supplierName", Configuration.ApiClient.ParameterToString(supplierName)); // query parameter
            if (editor != null) localVarQueryParams.Add("editor", Configuration.ApiClient.ParameterToString(editor)); // query parameter
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNoteToSupplier", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a note to a supplier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplierName"></param>
        /// <param name="editor"></param>
        /// <param name="text"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddNoteToSupplierAsync (string supplierName, string editor, string text)
        {
             await AddNoteToSupplierAsyncWithHttpInfo(supplierName, editor, text);

        }

        /// <summary>
        /// Adds a note to a supplier 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="supplierName"></param>
        /// <param name="editor"></param>
        /// <param name="text"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddNoteToSupplierAsyncWithHttpInfo (string supplierName, string editor, string text)
        {
            // verify the required parameter 'supplierName' is set
            if (supplierName == null)
                throw new ApiException(400, "Missing required parameter 'supplierName' when calling PageManagerApi->AddNoteToSupplier");
            // verify the required parameter 'editor' is set
            if (editor == null)
                throw new ApiException(400, "Missing required parameter 'editor' when calling PageManagerApi->AddNoteToSupplier");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling PageManagerApi->AddNoteToSupplier");

            var localVarPath = "/PageManager/AddNoteToSupplier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (supplierName != null) localVarQueryParams.Add("supplierName", Configuration.ApiClient.ParameterToString(supplierName)); // query parameter
            if (editor != null) localVarQueryParams.Add("editor", Configuration.ApiClient.ParameterToString(editor)); // query parameter
            if (text != null) localVarQueryParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddNoteToSupplier", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a product. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="chemicalName"></param>
        /// <param name="molWeight"></param>
        /// <param name="description"></param>
        /// <param name="price"></param>
        /// <param name="packaging"></param>
        /// <param name="deliveryTime"></param>
        /// <param name="producer"></param>
        /// <returns>Product</returns>
        public Product CreateProduct (string productName, string chemicalName, double? molWeight, string description, double? price, string packaging, string deliveryTime, string producer)
        {
             ApiResponse<Product> localVarResponse = CreateProductWithHttpInfo(productName, chemicalName, molWeight, description, price, packaging, deliveryTime, producer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a product. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="chemicalName"></param>
        /// <param name="molWeight"></param>
        /// <param name="description"></param>
        /// <param name="price"></param>
        /// <param name="packaging"></param>
        /// <param name="deliveryTime"></param>
        /// <param name="producer"></param>
        /// <returns>ApiResponse of Product</returns>
        public ApiResponse< Product > CreateProductWithHttpInfo (string productName, string chemicalName, double? molWeight, string description, double? price, string packaging, string deliveryTime, string producer)
        {
            // verify the required parameter 'productName' is set
            if (productName == null)
                throw new ApiException(400, "Missing required parameter 'productName' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'chemicalName' is set
            if (chemicalName == null)
                throw new ApiException(400, "Missing required parameter 'chemicalName' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'molWeight' is set
            if (molWeight == null)
                throw new ApiException(400, "Missing required parameter 'molWeight' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'price' is set
            if (price == null)
                throw new ApiException(400, "Missing required parameter 'price' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'packaging' is set
            if (packaging == null)
                throw new ApiException(400, "Missing required parameter 'packaging' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'deliveryTime' is set
            if (deliveryTime == null)
                throw new ApiException(400, "Missing required parameter 'deliveryTime' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'producer' is set
            if (producer == null)
                throw new ApiException(400, "Missing required parameter 'producer' when calling PageManagerApi->CreateProduct");

            var localVarPath = "/PageManager/CreateProduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productName != null) localVarQueryParams.Add("ProductName", Configuration.ApiClient.ParameterToString(productName)); // query parameter
            if (chemicalName != null) localVarQueryParams.Add("ChemicalName", Configuration.ApiClient.ParameterToString(chemicalName)); // query parameter
            if (molWeight != null) localVarQueryParams.Add("MolWeight", Configuration.ApiClient.ParameterToString(molWeight)); // query parameter
            if (description != null) localVarQueryParams.Add("Description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (price != null) localVarQueryParams.Add("Price", Configuration.ApiClient.ParameterToString(price)); // query parameter
            if (packaging != null) localVarQueryParams.Add("Packaging", Configuration.ApiClient.ParameterToString(packaging)); // query parameter
            if (deliveryTime != null) localVarQueryParams.Add("DeliveryTime", Configuration.ApiClient.ParameterToString(deliveryTime)); // query parameter
            if (producer != null) localVarQueryParams.Add("Producer", Configuration.ApiClient.ParameterToString(producer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
            
        }

        /// <summary>
        /// Creates a product. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="chemicalName"></param>
        /// <param name="molWeight"></param>
        /// <param name="description"></param>
        /// <param name="price"></param>
        /// <param name="packaging"></param>
        /// <param name="deliveryTime"></param>
        /// <param name="producer"></param>
        /// <returns>Task of Product</returns>
        public async System.Threading.Tasks.Task<Product> CreateProductAsync (string productName, string chemicalName, double? molWeight, string description, double? price, string packaging, string deliveryTime, string producer)
        {
             ApiResponse<Product> localVarResponse = await CreateProductAsyncWithHttpInfo(productName, chemicalName, molWeight, description, price, packaging, deliveryTime, producer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a product. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productName"></param>
        /// <param name="chemicalName"></param>
        /// <param name="molWeight"></param>
        /// <param name="description"></param>
        /// <param name="price"></param>
        /// <param name="packaging"></param>
        /// <param name="deliveryTime"></param>
        /// <param name="producer"></param>
        /// <returns>Task of ApiResponse (Product)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Product>> CreateProductAsyncWithHttpInfo (string productName, string chemicalName, double? molWeight, string description, double? price, string packaging, string deliveryTime, string producer)
        {
            // verify the required parameter 'productName' is set
            if (productName == null)
                throw new ApiException(400, "Missing required parameter 'productName' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'chemicalName' is set
            if (chemicalName == null)
                throw new ApiException(400, "Missing required parameter 'chemicalName' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'molWeight' is set
            if (molWeight == null)
                throw new ApiException(400, "Missing required parameter 'molWeight' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'price' is set
            if (price == null)
                throw new ApiException(400, "Missing required parameter 'price' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'packaging' is set
            if (packaging == null)
                throw new ApiException(400, "Missing required parameter 'packaging' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'deliveryTime' is set
            if (deliveryTime == null)
                throw new ApiException(400, "Missing required parameter 'deliveryTime' when calling PageManagerApi->CreateProduct");
            // verify the required parameter 'producer' is set
            if (producer == null)
                throw new ApiException(400, "Missing required parameter 'producer' when calling PageManagerApi->CreateProduct");

            var localVarPath = "/PageManager/CreateProduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (productName != null) localVarQueryParams.Add("ProductName", Configuration.ApiClient.ParameterToString(productName)); // query parameter
            if (chemicalName != null) localVarQueryParams.Add("ChemicalName", Configuration.ApiClient.ParameterToString(chemicalName)); // query parameter
            if (molWeight != null) localVarQueryParams.Add("MolWeight", Configuration.ApiClient.ParameterToString(molWeight)); // query parameter
            if (description != null) localVarQueryParams.Add("Description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (price != null) localVarQueryParams.Add("Price", Configuration.ApiClient.ParameterToString(price)); // query parameter
            if (packaging != null) localVarQueryParams.Add("Packaging", Configuration.ApiClient.ParameterToString(packaging)); // query parameter
            if (deliveryTime != null) localVarQueryParams.Add("DeliveryTime", Configuration.ApiClient.ParameterToString(deliveryTime)); // query parameter
            if (producer != null) localVarQueryParams.Add("Producer", Configuration.ApiClient.ParameterToString(producer)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Product>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Product) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Product)));
            
        }

        /// <summary>
        /// Deletes an existing product. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns></returns>
        public void DeleteProduct (Product product)
        {
             DeleteProductWithHttpInfo(product);
        }

        /// <summary>
        /// Deletes an existing product. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProductWithHttpInfo (Product product)
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new ApiException(400, "Missing required parameter 'product' when calling PageManagerApi->DeleteProduct");

            var localVarPath = "/PageManager/DeleteProduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (product != null && product.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(product); // http body (model) parameter
            }
            else
            {
                localVarPostBody = product; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes an existing product. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductAsync (Product product)
        {
             await DeleteProductAsyncWithHttpInfo(product);

        }

        /// <summary>
        /// Deletes an existing product. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductAsyncWithHttpInfo (Product product)
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new ApiException(400, "Missing required parameter 'product' when calling PageManagerApi->DeleteProduct");

            var localVarPath = "/PageManager/DeleteProduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (product != null && product.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(product); // http body (model) parameter
            }
            else
            {
                localVarPostBody = product; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edits an existing product. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="newProductName"></param>
        /// <param name="newChemicalName"></param>
        /// <param name="newMolWeight"></param>
        /// <param name="newDescription"></param>
        /// <param name="newPrice"></param>
        /// <param name="newPackaging"></param>
        /// <param name="newDeliveryTime"></param>
        /// <returns></returns>
        public void EditProduct (Product product, string newProductName, string newChemicalName, double? newMolWeight, string newDescription, double? newPrice, string newPackaging, string newDeliveryTime)
        {
             EditProductWithHttpInfo(product, newProductName, newChemicalName, newMolWeight, newDescription, newPrice, newPackaging, newDeliveryTime);
        }

        /// <summary>
        /// Edits an existing product. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="newProductName"></param>
        /// <param name="newChemicalName"></param>
        /// <param name="newMolWeight"></param>
        /// <param name="newDescription"></param>
        /// <param name="newPrice"></param>
        /// <param name="newPackaging"></param>
        /// <param name="newDeliveryTime"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditProductWithHttpInfo (Product product, string newProductName, string newChemicalName, double? newMolWeight, string newDescription, double? newPrice, string newPackaging, string newDeliveryTime)
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new ApiException(400, "Missing required parameter 'product' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newProductName' is set
            if (newProductName == null)
                throw new ApiException(400, "Missing required parameter 'newProductName' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newChemicalName' is set
            if (newChemicalName == null)
                throw new ApiException(400, "Missing required parameter 'newChemicalName' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newMolWeight' is set
            if (newMolWeight == null)
                throw new ApiException(400, "Missing required parameter 'newMolWeight' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newDescription' is set
            if (newDescription == null)
                throw new ApiException(400, "Missing required parameter 'newDescription' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newPrice' is set
            if (newPrice == null)
                throw new ApiException(400, "Missing required parameter 'newPrice' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newPackaging' is set
            if (newPackaging == null)
                throw new ApiException(400, "Missing required parameter 'newPackaging' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newDeliveryTime' is set
            if (newDeliveryTime == null)
                throw new ApiException(400, "Missing required parameter 'newDeliveryTime' when calling PageManagerApi->EditProduct");

            var localVarPath = "/PageManager/EditProduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (newProductName != null) localVarQueryParams.Add("newProductName", Configuration.ApiClient.ParameterToString(newProductName)); // query parameter
            if (newChemicalName != null) localVarQueryParams.Add("newChemicalName", Configuration.ApiClient.ParameterToString(newChemicalName)); // query parameter
            if (newMolWeight != null) localVarQueryParams.Add("newMolWeight", Configuration.ApiClient.ParameterToString(newMolWeight)); // query parameter
            if (newDescription != null) localVarQueryParams.Add("newDescription", Configuration.ApiClient.ParameterToString(newDescription)); // query parameter
            if (newPrice != null) localVarQueryParams.Add("newPrice", Configuration.ApiClient.ParameterToString(newPrice)); // query parameter
            if (newPackaging != null) localVarQueryParams.Add("newPackaging", Configuration.ApiClient.ParameterToString(newPackaging)); // query parameter
            if (newDeliveryTime != null) localVarQueryParams.Add("newDeliveryTime", Configuration.ApiClient.ParameterToString(newDeliveryTime)); // query parameter
            if (product != null && product.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(product); // http body (model) parameter
            }
            else
            {
                localVarPostBody = product; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edits an existing product. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="newProductName"></param>
        /// <param name="newChemicalName"></param>
        /// <param name="newMolWeight"></param>
        /// <param name="newDescription"></param>
        /// <param name="newPrice"></param>
        /// <param name="newPackaging"></param>
        /// <param name="newDeliveryTime"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditProductAsync (Product product, string newProductName, string newChemicalName, double? newMolWeight, string newDescription, double? newPrice, string newPackaging, string newDeliveryTime)
        {
             await EditProductAsyncWithHttpInfo(product, newProductName, newChemicalName, newMolWeight, newDescription, newPrice, newPackaging, newDeliveryTime);

        }

        /// <summary>
        /// Edits an existing product. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="newProductName"></param>
        /// <param name="newChemicalName"></param>
        /// <param name="newMolWeight"></param>
        /// <param name="newDescription"></param>
        /// <param name="newPrice"></param>
        /// <param name="newPackaging"></param>
        /// <param name="newDeliveryTime"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditProductAsyncWithHttpInfo (Product product, string newProductName, string newChemicalName, double? newMolWeight, string newDescription, double? newPrice, string newPackaging, string newDeliveryTime)
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new ApiException(400, "Missing required parameter 'product' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newProductName' is set
            if (newProductName == null)
                throw new ApiException(400, "Missing required parameter 'newProductName' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newChemicalName' is set
            if (newChemicalName == null)
                throw new ApiException(400, "Missing required parameter 'newChemicalName' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newMolWeight' is set
            if (newMolWeight == null)
                throw new ApiException(400, "Missing required parameter 'newMolWeight' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newDescription' is set
            if (newDescription == null)
                throw new ApiException(400, "Missing required parameter 'newDescription' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newPrice' is set
            if (newPrice == null)
                throw new ApiException(400, "Missing required parameter 'newPrice' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newPackaging' is set
            if (newPackaging == null)
                throw new ApiException(400, "Missing required parameter 'newPackaging' when calling PageManagerApi->EditProduct");
            // verify the required parameter 'newDeliveryTime' is set
            if (newDeliveryTime == null)
                throw new ApiException(400, "Missing required parameter 'newDeliveryTime' when calling PageManagerApi->EditProduct");

            var localVarPath = "/PageManager/EditProduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (newProductName != null) localVarQueryParams.Add("newProductName", Configuration.ApiClient.ParameterToString(newProductName)); // query parameter
            if (newChemicalName != null) localVarQueryParams.Add("newChemicalName", Configuration.ApiClient.ParameterToString(newChemicalName)); // query parameter
            if (newMolWeight != null) localVarQueryParams.Add("newMolWeight", Configuration.ApiClient.ParameterToString(newMolWeight)); // query parameter
            if (newDescription != null) localVarQueryParams.Add("newDescription", Configuration.ApiClient.ParameterToString(newDescription)); // query parameter
            if (newPrice != null) localVarQueryParams.Add("newPrice", Configuration.ApiClient.ParameterToString(newPrice)); // query parameter
            if (newPackaging != null) localVarQueryParams.Add("newPackaging", Configuration.ApiClient.ParameterToString(newPackaging)); // query parameter
            if (newDeliveryTime != null) localVarQueryParams.Add("newDeliveryTime", Configuration.ApiClient.ParameterToString(newDeliveryTime)); // query parameter
            if (product != null && product.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(product); // http body (model) parameter
            }
            else
            {
                localVarPostBody = product; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets all suppliers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Page&gt;</returns>
        public List<Page> GetSuppliers ()
        {
             ApiResponse<List<Page>> localVarResponse = GetSuppliersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all suppliers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Page&gt;</returns>
        public ApiResponse< List<Page> > GetSuppliersWithHttpInfo ()
        {

            var localVarPath = "/PageManager/GetSuppliers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuppliers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Page>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Page>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Page>)));
            
        }

        /// <summary>
        /// Gets all suppliers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Page&gt;</returns>
        public async System.Threading.Tasks.Task<List<Page>> GetSuppliersAsync ()
        {
             ApiResponse<List<Page>> localVarResponse = await GetSuppliersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all suppliers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Page&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Page>>> GetSuppliersAsyncWithHttpInfo ()
        {

            var localVarPath = "/PageManager/GetSuppliers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSuppliers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Page>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Page>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Page>)));
            
        }

        /// <summary>
        /// Update a supplier page 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="description"></param>
        /// <param name="location"></param>
        /// <param name="contactInformation"></param>
        /// <returns></returns>
        public void UpdatePage (string page, string description, string location, string contactInformation)
        {
             UpdatePageWithHttpInfo(page, description, location, contactInformation);
        }

        /// <summary>
        /// Update a supplier page 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="description"></param>
        /// <param name="location"></param>
        /// <param name="contactInformation"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePageWithHttpInfo (string page, string description, string location, string contactInformation)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling PageManagerApi->UpdatePage");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling PageManagerApi->UpdatePage");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling PageManagerApi->UpdatePage");
            // verify the required parameter 'contactInformation' is set
            if (contactInformation == null)
                throw new ApiException(400, "Missing required parameter 'contactInformation' when calling PageManagerApi->UpdatePage");

            var localVarPath = "/PageManager/UpdatePage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (location != null) localVarQueryParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // query parameter
            if (contactInformation != null) localVarQueryParams.Add("contactInformation", Configuration.ApiClient.ParameterToString(contactInformation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a supplier page 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="description"></param>
        /// <param name="location"></param>
        /// <param name="contactInformation"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePageAsync (string page, string description, string location, string contactInformation)
        {
             await UpdatePageAsyncWithHttpInfo(page, description, location, contactInformation);

        }

        /// <summary>
        /// Update a supplier page 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"></param>
        /// <param name="description"></param>
        /// <param name="location"></param>
        /// <param name="contactInformation"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePageAsyncWithHttpInfo (string page, string description, string location, string contactInformation)
        {
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling PageManagerApi->UpdatePage");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling PageManagerApi->UpdatePage");
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling PageManagerApi->UpdatePage");
            // verify the required parameter 'contactInformation' is set
            if (contactInformation == null)
                throw new ApiException(400, "Missing required parameter 'contactInformation' when calling PageManagerApi->UpdatePage");

            var localVarPath = "/PageManager/UpdatePage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (description != null) localVarQueryParams.Add("description", Configuration.ApiClient.ParameterToString(description)); // query parameter
            if (location != null) localVarQueryParams.Add("location", Configuration.ApiClient.ParameterToString(location)); // query parameter
            if (contactInformation != null) localVarQueryParams.Add("contactInformation", Configuration.ApiClient.ParameterToString(contactInformation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePage", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
